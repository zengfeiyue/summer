<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.summer.school.dao.OrganizationMapper">
  <resultMap id="BaseResultMap" type="com.summer.school.api.entity.Organization">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="type" jdbcType="BIT" property="type" />
    <result column="parend_id" jdbcType="INTEGER" property="parendId" />
    <result column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="school_id" jdbcType="INTEGER" property="schoolId" />
    <result column="grade" jdbcType="DOUBLE" property="grade" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, type, parend_id, member_id, school_id, grade, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from organization
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from organization
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.summer.school.api.entity.Organization">
    insert into organization (id, name, type, parend_id, 
      member_id, school_id, grade, 
      create_time)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=BIT}, #{parendId,jdbcType=INTEGER}, 
      #{memberId,jdbcType=INTEGER}, #{schoolId,jdbcType=INTEGER}, #{grade,jdbcType=DOUBLE}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.summer.school.api.entity.Organization">
    insert into organization
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="parendId != null">
        parend_id,
      </if>
      <if test="memberId != null">
        member_id,
      </if>
      <if test="schoolId != null">
        school_id,
      </if>
      <if test="grade != null">
        grade,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=BIT},
      </if>
      <if test="parendId != null">
        #{parendId,jdbcType=INTEGER},
      </if>
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="schoolId != null">
        #{schoolId,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.summer.school.api.entity.Organization">
    update organization
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=BIT},
      </if>
      <if test="parendId != null">
        parend_id = #{parendId,jdbcType=INTEGER},
      </if>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="schoolId != null">
        school_id = #{schoolId,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        grade = #{grade,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.summer.school.api.entity.Organization">
    update organization
    set name = #{name,jdbcType=VARCHAR},
      type = #{type,jdbcType=BIT},
      parend_id = #{parendId,jdbcType=INTEGER},
      member_id = #{memberId,jdbcType=INTEGER},
      school_id = #{schoolId,jdbcType=INTEGER},
      grade = #{grade,jdbcType=DOUBLE},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>